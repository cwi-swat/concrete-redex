
//Simpeler is misschien: Om A te initializen moet B not-initialized zijn en voor B, A not initialized.
//Een initialize check valt ook onder sync (althans als je het gaat implementeren)
//Met concurrency, zou het kunnen dat ze beiden initialized raken, terwijl dat eigenlijk niet mag.

entity Foo {
  // how to restrict access to entities that have not been initialized?
  // default values in field decls? And can we access entities passed in to
  // the transition in the precondition? (Yes, I'd guess)
  init on init(foo: Foo): ready require !(foo in ready);
 
  state ready {}
}

entity Main {
  init on init(a: Foo, b: Foo): done par {
    a.init(b);
    b.init(a);
  }
  
  final done;
}

let a = new Foo in
  let b = new Foo in {
    let m = new Main in
      m.init(a, b);  
 }

