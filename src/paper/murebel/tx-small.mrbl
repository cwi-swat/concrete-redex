entity Account {
  amount: int

  init 
    on open(initial: int): opened {
      this.amount = initial;
    } 

  final closed;
  
  state opened {
    on deposit(n: int) this.amount = this.amount + n;

    on withdraw(n: int) require this.amount > n 
      this.amount = this.amount - n;
    
    on close(): closed;
  }
}

entity Trans {
  amount: int
  from: Account
  to: Account
   
  init 
    on create(amount: int, from: Account, to: Account): ready {
      this.amount = amount;
      this.from = from;
      this.to = to;
    }
    
  state ready {
    on doIt(): booked {
      sync {
        this.from.withdraw(this.amount);
        this.to.deposit(this.amount);
      } 
    }
  }
    
  final booked;
  final canceled;
}

let from = new Account in
let to = new Account in {
  par {
    from.open(100); 
    to.open(50);
  }
  let tx = new Trans in {
     tx.create(10, from, to);
     tx.doIt();
  }
}



