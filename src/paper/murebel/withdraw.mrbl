
entity Account {
  balance: int

  init 
    on open(balance: int): opened 
      this.balance = balance;

  state opened {
    on deposit(n: int) 
      require this.balance + n < 10
      this.balance = this.balance + n;

    on withdraw(n: int) 
      this.balance = this.balance - n;
    
  }
}

entity Trans {
  amount: int
  from: Account
  to: Account
   
  init 
    on create(amount: int, from: Account, to: Account): ready {
      this.amount = amount;
      this.from = from;
      this.to = to;
    }
    
  state ready {
    on book(): booked {
      sync {
        this.from.withdraw(this.amount);
        this.to.deposit(this.amount);
      }
    }
  }
    
  final booked;
}


let a1 = new Account in
let a2 = new Account in {
  a1.open(10);
  a2.open(5);
  let tx1 = new Trans in {
     tx1.create(10, a1, a2);  
     let tx2 = new Trans in {
       tx2.create(5, a2, a1); 
       par {
         tx1.book();
         tx2.book();
       }
    }
  }
}